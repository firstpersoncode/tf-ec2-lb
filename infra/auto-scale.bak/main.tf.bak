variable "home_path" {}
variable "ami_id" {}
variable "instance_type" {}
variable "tag_name" {}
variable "sg_enable_ssh_https" {}
variable "user_data_template" {}
variable "ec2_sg_name_for_node_api" {}
variable "lb_target_group_arn" {}
variable "public_subnets" {}

# output "ssh_connection_string_for_ec2" {
#   value = format("%s%s", "ssh -i ${var.home_path}/.ssh/id_rsa_terraform_node ubuntu@", aws_launch_template.ec2_launch.public_ip)
# }

output "ec2_instance_template_id" {
  value = aws_launch_template.ec2_launch.id
}

resource "aws_launch_template" "ec2_launch" {
  name = var.tag_name

  image_id      = var.ami_id
  instance_type = var.instance_type
  # vpc_security_group_ids      = [var.sg_enable_ssh_https, var.ec2_sg_name_for_node_api]
  key_name   = "id_rsa_terraform_node"

  network_interfaces {
    associate_public_ip_address = true
    security_groups             =  [var.sg_enable_ssh_https, var.ec2_sg_name_for_node_api]
  }

  user_data = filebase64(var.user_data_template)

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = var.tag_name
    }
  }

  metadata_options {
    http_endpoint = "enabled"  # Enable the IMDSv2 endpoint
    http_tokens   = "required" # Require the use of IMDSv2 tokens
  }
}

resource "aws_autoscaling_group" "ec2_asg" {
  name                = "dev-asg"
  desired_capacity    = 2
  min_size            = 1
  max_size            = 3
  target_group_arns   = [var.lb_target_group_arn]
  vpc_zone_identifier = var.public_subnets

  launch_template {
    id      = aws_launch_template.ec2_launch.id
    version = "${aws_launch_template.ec2_launch.latest_version}"
  }

  health_check_type = "EC2"
}